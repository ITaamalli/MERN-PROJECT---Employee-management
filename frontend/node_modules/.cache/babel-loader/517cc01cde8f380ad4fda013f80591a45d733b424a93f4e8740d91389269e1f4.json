{"ast":null,"code":"function normalize(strArray) {\n  var resultArray = [];\n  if (strArray.length === 0) {\n    return '';\n  }\n  if (typeof strArray[0] !== 'string') {\n    throw new TypeError('Url must be a string. Received ' + strArray[0]);\n  }\n\n  // If the first part is a plain protocol, we combine it with the next part.\n  if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n    var first = strArray.shift();\n    strArray[0] = first + strArray[0];\n  }\n\n  // There must be two or three slashes in the file protocol, two slashes in anything else.\n  if (strArray[0].match(/^file:\\/\\/\\//)) {\n    strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n  } else {\n    strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n  }\n  for (var i = 0; i < strArray.length; i++) {\n    var component = strArray[i];\n    if (typeof component !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + component);\n    }\n    if (component === '') {\n      continue;\n    }\n    if (i > 0) {\n      // Removing the starting slashes for each component but the first.\n      component = component.replace(/^[\\/]+/, '');\n    }\n    if (i < strArray.length - 1) {\n      // Removing the ending slashes for each component but the last.\n      component = component.replace(/[\\/]+$/, '');\n    } else {\n      // For the last component we will combine multiple slashes to a single one.\n      component = component.replace(/[\\/]+$/, '/');\n    }\n    resultArray.push(component);\n  }\n  var str = resultArray.join('/');\n  // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n  // remove trailing slash before parameters or hash\n  str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n  // replace ? in parameters with &\n  var parts = str.split('?');\n  str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n  return str;\n}\nexport default function urlJoin() {\n  var input;\n  if (typeof arguments[0] === 'object') {\n    input = arguments[0];\n  } else {\n    input = [].slice.call(arguments);\n  }\n  return normalize(input);\n}","map":{"version":3,"names":["normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","urlJoin","input","arguments","slice","call"],"sources":["C:/Users/dell/Desktop/Employee-management-using-MERN-stack/frontend/node_modules/url-join/lib/url-join.js"],"sourcesContent":["function normalize (strArray) {\n  var resultArray = [];\n  if (strArray.length === 0) { return ''; }\n\n  if (typeof strArray[0] !== 'string') {\n    throw new TypeError('Url must be a string. Received ' + strArray[0]);\n  }\n\n  // If the first part is a plain protocol, we combine it with the next part.\n  if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n    var first = strArray.shift();\n    strArray[0] = first + strArray[0];\n  }\n\n  // There must be two or three slashes in the file protocol, two slashes in anything else.\n  if (strArray[0].match(/^file:\\/\\/\\//)) {\n    strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n  } else {\n    strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n  }\n\n  for (var i = 0; i < strArray.length; i++) {\n    var component = strArray[i];\n\n    if (typeof component !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + component);\n    }\n\n    if (component === '') { continue; }\n\n    if (i > 0) {\n      // Removing the starting slashes for each component but the first.\n      component = component.replace(/^[\\/]+/, '');\n    }\n    if (i < strArray.length - 1) {\n      // Removing the ending slashes for each component but the last.\n      component = component.replace(/[\\/]+$/, '');\n    } else {\n      // For the last component we will combine multiple slashes to a single one.\n      component = component.replace(/[\\/]+$/, '/');\n    }\n\n    resultArray.push(component);\n\n  }\n\n  var str = resultArray.join('/');\n  // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n  // remove trailing slash before parameters or hash\n  str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n  // replace ? in parameters with &\n  var parts = str.split('?');\n  str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n  return str;\n}\n\nexport default function urlJoin() {\n  var input;\n\n  if (typeof arguments[0] === 'object') {\n    input = arguments[0];\n  } else {\n    input = [].slice.call(arguments);\n  }\n\n  return normalize(input);\n}\n"],"mappings":"AAAA,SAASA,SAASA,CAAEC,QAAQ,EAAE;EAC5B,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAID,QAAQ,CAACE,MAAM,KAAK,CAAC,EAAE;IAAE,OAAO,EAAE;EAAE;EAExC,IAAI,OAAOF,QAAQ,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IACnC,MAAM,IAAIG,SAAS,CAAC,iCAAiC,GAAGH,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtE;;EAEA;EACA,IAAIA,QAAQ,CAAC,CAAC,CAAC,CAACI,KAAK,CAAC,cAAc,CAAC,IAAIJ,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;IAC5D,IAAIG,KAAK,GAAGL,QAAQ,CAACM,KAAK,EAAE;IAC5BN,QAAQ,CAAC,CAAC,CAAC,GAAGK,KAAK,GAAGL,QAAQ,CAAC,CAAC,CAAC;EACnC;;EAEA;EACA,IAAIA,QAAQ,CAAC,CAAC,CAAC,CAACI,KAAK,CAAC,cAAc,CAAC,EAAE;IACrCJ,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,CAACO,OAAO,CAAC,eAAe,EAAE,QAAQ,CAAC;EAC9D,CAAC,MAAM;IACLP,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,CAACO,OAAO,CAAC,eAAe,EAAE,OAAO,CAAC;EAC7D;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,QAAQ,CAACE,MAAM,EAAEM,CAAC,EAAE,EAAE;IACxC,IAAIC,SAAS,GAAGT,QAAQ,CAACQ,CAAC,CAAC;IAE3B,IAAI,OAAOC,SAAS,KAAK,QAAQ,EAAE;MACjC,MAAM,IAAIN,SAAS,CAAC,iCAAiC,GAAGM,SAAS,CAAC;IACpE;IAEA,IAAIA,SAAS,KAAK,EAAE,EAAE;MAAE;IAAU;IAElC,IAAID,CAAC,GAAG,CAAC,EAAE;MACT;MACAC,SAAS,GAAGA,SAAS,CAACF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IAC7C;IACA,IAAIC,CAAC,GAAGR,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;MAC3B;MACAO,SAAS,GAAGA,SAAS,CAACF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IAC7C,CAAC,MAAM;MACL;MACAE,SAAS,GAAGA,SAAS,CAACF,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;IAC9C;IAEAN,WAAW,CAACS,IAAI,CAACD,SAAS,CAAC;EAE7B;EAEA,IAAIE,GAAG,GAAGV,WAAW,CAACW,IAAI,CAAC,GAAG,CAAC;EAC/B;;EAEA;EACAD,GAAG,GAAGA,GAAG,CAACJ,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC;;EAE1C;EACA,IAAIM,KAAK,GAAGF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC;EAC1BH,GAAG,GAAGE,KAAK,CAACP,KAAK,EAAE,IAAIO,KAAK,CAACX,MAAM,GAAG,CAAC,GAAG,GAAG,GAAE,EAAE,CAAC,GAAGW,KAAK,CAACD,IAAI,CAAC,GAAG,CAAC;EAEpE,OAAOD,GAAG;AACZ;AAEA,eAAe,SAASI,OAAOA,CAAA,EAAG;EAChC,IAAIC,KAAK;EAET,IAAI,OAAOC,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IACpCD,KAAK,GAAGC,SAAS,CAAC,CAAC,CAAC;EACtB,CAAC,MAAM;IACLD,KAAK,GAAG,EAAE,CAACE,KAAK,CAACC,IAAI,CAACF,SAAS,CAAC;EAClC;EAEA,OAAOlB,SAAS,CAACiB,KAAK,CAAC;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}